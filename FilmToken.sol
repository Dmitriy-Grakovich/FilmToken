/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract FilmToken {
    
    struct Token {
        string name;
        uint yearOfCreation;
        string genre;
        uint duration;
        uint rating;
    }
    //массив фильмов
    Token[] tokensArr;
    

    mapping(string => uint) tikenToOwner;
    mapping(string => uint) tikenId;

    modifier checkOwnerAndAccept {
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}
    modifier owner(string tokenId){
		require(msg.pubkey() == tikenToOwner[tokenId], 101);
		tvm.accept();
		_;
	}

    // методе создания токена должна быть проверка на уникальность имени. Выпускать "одноименные" токены должно быть нельзя.
    function createToken(string name, uint yearOfCreation, string genre, uint duration, uint rating) public checkOwnerAndAccept {
        require(!tikenToOwner.exists(name), 103);
        tokensArr.push(Token(name, yearOfCreation, genre, duration, rating));
        string keyAs = name;
        uint keyAsLastNum = tokensArr.length - 1;
        tikenToOwner[keyAs] = msg.pubkey();
        tikenId[keyAs] = keyAsLastNum;
    }
    //возвращает владельца
    function getTokenOwner(string filmName) public view returns(uint) {
        return tikenToOwner[filmName];
    }
    // возвращает инфу по фильму
    function getTokenInfo(string filmName) public view returns(string tokenName, uint tokenyearOfCreation, string tokenGenre, uint tokenDuration, uint tokenRating) {
       tokenName = tokensArr[tikenId[filmName]].name;
       tokenyearOfCreation = tokensArr[tikenId[filmName]].yearOfCreation;
       tokenGenre = tokensArr[tikenId[filmName]].genre;
       tokenDuration = tokensArr[tikenId[filmName]].duration;
       tokenRating = tokensArr[tikenId[filmName]].rating;
    }

    //- должна быть возвожность "выставить токен на продажу", то есть указать стоимость по которой токен продается.
    //Должно быть доступно толкьо владельцу
    function sale(string filmName, uint price) public owner(filmName) returns(string tokenSale, uint tokenPrice){
            tokenSale = filmName;
            tokenPrice = price;
    }

    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        
    }

    
}
